/*
  ==============================================================================

    DeckGUI.cpp
    Created: 13 Feb 2023 6:24:36pm
    Author:  adity

  ==============================================================================
*/

#include <JuceHeader.h>
#include "DeckGUI.h"

//==============================================================================
DeckGUI::DeckGUI()
{
    // In your constructor, you should add any child components, and
    // initialise any special settings that your component needs.
    addAndMakeVisible(playButton);
    addAndMakeVisible(stopButton);
    addAndMakeVisible(loadButton);
    
    addAndMakeVisible(volSlider);
    addAndMakeVisible(speedSlider);
    addAndMakeVisible(posSlider);
}

DeckGUI::~DeckGUI()
{
}

void DeckGUI::paint (juce::Graphics& g)
{
    /* This demo code just fills the component's background and
       draws some placeholder text to get you started.

       You should replace everything in this method with your own
       drawing code..
    */

    g.fillAll (getLookAndFeel().findColour (juce::ResizableWindow::backgroundColourId));   // clear the background

    g.setColour (juce::Colours::grey);
    g.drawRect (getLocalBounds(), 1);   // draw an outline around the component

    g.setColour (juce::Colours::white);
    g.setFont (14.0f);
    g.drawText ("DeckGUI", getLocalBounds(),
                juce::Justification::centred, true);   // draw some placeholder text
}

void DeckGUI::resized()
{
    // This method is where you should set the bounds of any child
    // components that your component contains..

}


void DeckGUI::sliderValueChanged(juce::Slider* slider)
{
  if(slider == &volSlider)
  {
    player1.setGain( slider->getValue() );
  }

  if(slider == &speedSlider)
  {
    player1.setSpeed( slider->getValue() );
  }
  
  if(slider == &posSlider)
  {
    player1.setPositionRelative(slider->getValue() );
  }
}


void DeckGUI::buttonClicked(juce::Button* button)
{

  if(button == &playButton)
  {
    std::cout << "Play Button was clicked" << std::endl;
    player1.start();
  }
  if(button == &stopButton)
  {
    std::cout << "Stop Button was clicked" << std::endl;
    player1.stop();
  }
  if (button == &loadButton)
  {
      // this does work in 6.1 but the syntax is a little funky
      // https://docs.juce.com/master/classFileChooser.html#ac888983e4abdd8401ba7d6124ae64ff3
      // - configure the dialogue
      auto fileChooserFlags = juce::FileBrowserComponent::canSelectFiles;
      // - launch out of the main thread
      // - note how we use a lambda function which you've probably
      // not seen before. Please do not worry too much about that. 
      fChooser.launchAsync(fileChooserFlags, [this](const juce::FileChooser& chooser)
      {
      juce::File chosenFile = chooser.getResult();
          player1.loadURL(juce::URL{chosenFile});
      });
  }



void DeckGUI::resized()
{
    // This is called when the MainContentComponent is resized.
    // If you add any child components, this is where you should
    // update their positions.
    double rowH = getHeight() / 6;
    playButton.setBounds(0, 0, getWidth(), rowH);

    stopButton.setBounds(0, rowH, getWidth(), rowH);
    volSlider.setBounds(0, rowH*2, getWidth(), rowH);
    speedSlider.setBounds(0, rowH*3, getWidth(), rowH);
    posSlider.setBounds(0, rowH*4, getWidth(), rowH);
    loadButton.setBounds(0,rowH*5, getWidth(), rowH);
    

}



void DeckGUI::paint (juce::Graphics& g)
{
    // (Our component is opaque, so we must completely fill the background with a solid colour)
    g.fillAll (getLookAndFeel().findColour (juce::ResizableWindow::backgroundColourId));

    // You can add your drawing code here!
}




    playButton.addListener(this);
    stopButton.addListener(this);
    loadButton.addListener(this);
    
    volSlider.addListener(this);
    speedSlider.addListener(this);
    posSlider.addListener(this);
  
    volSlider.setRange(0,0, 1.0);
    posSlider.setRange(0.0, 1.0);




